<style>
    /* Optional custom styles */
    .sidebar-link-active {
        background-color: #1a202c;
    }

    .sidebar-link-active:hover {
        background-color: #1a202c;
    }
</style>
<%- include('includes/header') %>
<!-- Header -->
<header class="bg-gray-800 text-white p-4 flex justify-between items-center">
    <h1 class="text-xl font-bold">Welcome <a href="/user/user-details?username=<%= cookies.user_name%>"
            class="text-blue-600 hover:text-red-500">
            <%= cookies.user_name%>
        </a></h1>
</header>

<div class="container mx-auto px-4 py-6">
    <div class="flex flex-col lg:flex-row gap-4">
        <nav class="w-full lg:w-1/5 bg-gray-900 text-white p-4">
            <ul>
                <li>
                    <a href="/user/dashboard"
                        class="block py-2 px-4 text-white hover:bg-gray-800 sidebar-link-active" id="dashboard">Dashboard</a>
                </li>
                <li>
                    <a href="/user/user-details?username=<%= cookies.user_name%>"
                        class="block py-2 px-4 text-white hover:bg-gray-800">Profile</a>
                </li>
                <li>
                    <a href="#" class="block py-2 px-4 text-white hover:bg-gray-800" id="message">Messages</a>
                </li>
                <li>
                    <a href="/user/logout" class="block py-2 px-4 text-white hover:bg-gray-800">Logout</a>
                </li>
            </ul>
        </nav>
        <main class="h-screen w-full lg:w-4/5 p-4 " id="das_content">
            <div class="bg-white rounded-lg shadow-lg p-4 mb-4">
                <h2 class="text-lg font-semibold mb-2">User Statistics</h2>
                <div class="flex flex-wrap justify-around gap-4">
                    <div class="text-center">
                        <span class="text-lg font-bold"><%=totalPosts%></span>
                        <p class="text-gray-500">Total Posts</p>
                    </div>
                    <div class="text-center">
                        <span class="text-lg font-bold"><%=totalFollowers%></span>
                        <p class="text-gray-500">Total Followers</p>
                    </div>
                    <div class="text-center">
                        <span class="text-lg font-bold"><%=totalLikes%></span>
                        <p class="text-gray-500">Total Likes</p>
                    </div>
                    <div class="text-center">
                        <span class="text-lg font-bold">
                            <%=totalDisLikes%>
                        </span>
                        <p class="text-gray-500">Total Dislikes</p>
                    </div>
                </div>
            </div>
        </main>
        <div class=" h-screen w-full lg:w-4/5 p-4 hidden" id="message_box">
            <div class="w-full bg-white border-r border-gray-200">
                <div class="p-4 border-b border-gray-200">
                    <h2 class="text-xl font-semibold">Chats</h2>
                </div>
                <div class="p-4 space-y-4">
                   
                     <%chatUsers.forEach((user)=>{%>
                        <div class="flex items-center p-2 hover:bg-gray-100 cursor-pointer chat-boxes" data-set="<%= user.username %>">
                            <div class="relative w-10 h-10 bg-gray-300 rounded-full flex-shrink-0 flex justify-center items-center short_name">
                                <%= user.fname[0]+''+user.lname[0] %>
                                    
                                    <div class="absolute bottom-0 right-0 w-3 h-3 <%= user.isLogin==1?'bg-green-500':'bg-slate-500'%>  rounded-full border border-white online-status " id="<%= user.username%>">
                                    </div>
                            </div>
                            <div class="ml-4">
                                <p class="text-sm font-medium text-gray-900 full-name">
                                    <%= user.fname+' '+user.lname %></p>
                                <p class="text-xs text-gray-500 last_message" >Last message...</p>
                            </div>
                        </div>
                    <%})%>
                  
                </div>
            </div>
    
           
        </div>


    </div>
</div>

<div
    class="mx-auto  flex items-center justify-center chat-container fixed right-0 sm:right-3 -bottom-full transition-all duration-300 ease-in-out h-[482px] w-full sm:w-72">
    <div class="w-full h-full bg-white shadow-lg rounded-lg overflow-hidden flex flex-col relative">
        <span class="absolute top-1 right-1 cursor-pointer" id="x_mark" onclick="CloseChatbox()">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
            </svg>
        </span>
        <!-- Header -->
        <div class="bg-green-600 text-white p-4 flex items-center" id="message-head">
            <div class="w-10 h-10 bg-gray-300 rounded-full mr-4 text-center flex items-center justify-center cursor-pointer" id="short_name">
                
            </div>
            <div>
                <h2 class="text-lg font-semibold" id="full-name">
                   
                </h2>
                <p class="text-sm" id="online_status"></p>
            </div>
        </div>
        <!-- Chat Area -->
        <div class="flex-1 p-4 overflow-y-auto" id="chat-con">

        </div>
        <!-- Input Area -->
        <div class="border-t border-gray-200 p-4 flex items-center bg-white">
            <input type="text" placeholder="Type a message"
                class="flex-1 p-2 h-12 min-h-[2.5rem] max-h-[5rem] w-72 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                id="content_field" required>
            <button class="ml-4 p-2 bg-green-600 text-white rounded-full" onclick="sendMessage()">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M14.752 11.168l-7.72 4.05a.6.6 0 01-.86-.634l1.146-4.585-4.295-3.37a.6.6 0 01.33-1.054l4.824-.413L10.6 2.58a.6.6 0 011.092 0l2.053 4.86 4.824.413a.6.6 0 01.33 1.054l-4.295 3.37 1.146 4.585a.6.6 0 01-.86.634l-7.72-4.05z">
                    </path>
                </svg>
            </button>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    let message=document.getElementById('message');
    let message_box=document.getElementById('message_box');
    let dashboard=document.getElementById('dashboard');
    let das_box=document.getElementById('das_content');
    
    message.addEventListener('click',(event)=>{
        event.preventDefault();
        if (!das_box.classList.contains('hidden')) {
            das_box.classList.add('hidden');
        }
        if(message_box.classList.contains('hidden')){
            message_box.classList.remove('hidden');
            message_box.classList.add('flex');
        }
    })
    dashboard.addEventListener('click',(event)=>{
        event.preventDefault();
        if(!message_box.classList.contains('hidden')){
            message_box.classList.add('hidden');
        }
        if (das_box.classList.contains('hidden')) {
            das_box.classList.remove('hidden');
        }
    })
</script>
<script src="/socket.io/socket.io.js"></script>

<script>
    const socket = io({
        auth: {
            token: '<%= cookies.user_id%>'
        }
    });

    socket.on('UserLoggedIn', (data) => {
        if(data.username===document.querySelector('.chat-container').getAttribute('data-set')){
            document.getElementById('online_status').innerHTML = 'online';
        }  
        let login_div=document.getElementById(''+data.username);
        login_div.classList.remove('bg-slate-500');
        login_div.classList.add('bg-green-500');

    })
    socket.on('UserLoggedOut', (data) => {
        if (data.username === document.querySelector('.chat-container').getAttribute('data-set')) {
           document.getElementById('online_status').innerHTML = 'offline'
        }
        
        let login_div = document.getElementById('' + data.username);
        login_div.classList.remove('bg-green-500');
        login_div.classList.add('bg-slate-500');
       
    })
</script>

<script>
    let chat_boxes=document.querySelectorAll('.chat-boxes');
    chat_boxes.forEach((chat_box)=>{
        chat_box.addEventListener('click',(event)=>{
            event.preventDefault();
            let username=chat_box.getAttribute('data-set');
            let fullname=chat_box.querySelector('.full-name').innerText.trim();
            let short_name= chat_box.querySelector('.short_name').innerText;
            let online_status=chat_box.querySelector('.online-status').classList.contains('bg-green-500');
            openChatbox(fullname,short_name,username, online_status);
        })
    })
    
    function openChatbox(fullname, short_name,username,online_status){
        let chat_container = document.querySelector('.chat-container');
        chat_container.setAttribute('data-set',username);
        if (chat_container.classList.contains('-bottom-full')) {
            chat_container.classList.remove('-bottom-full');
            chat_container.classList.add('bottom-0');
            document.getElementById('short_name').innerText=short_name;
            document.getElementById('short_name').addEventListener('click',()=>{
                window.location.href=`/user/user-details?username=${username}`;
            })
            document.getElementById('full-name').innerText = fullname;
            if(online_status){
                document.getElementById('online_status').innerText='online';
            }
            else{
                document.getElementById('online_status').innerText = 'ofline';
            }
            let chat_content= document.getElementById('chat-con');
            chat_content.innerHTML='';
            getAllMessage(username);
           
        }
        else {
            chat_container.classList.add('-bottom-full');
            chat_container.classList.remove('bottom-0');
            document.getElementById('short_name').innerText = '';
            document.getElementById('full-name').innerText = '';
           
        }
    }
    function CloseChatbox(){
        let chat_container = document.querySelector('.chat-container');
        if (chat_container.classList.contains('bottom-0')) {
            chat_container.classList.add('-bottom-full');
            chat_container.classList.remove('bottom-0');
            document.getElementById('short_name').innerText = '';
            document.getElementById('full-name').innerText = '';
        }
       
    }


    function getCurrentTime() {
            const now = new Date();
            let hours = now.getHours();
            const minutes = now.getMinutes();
            const ampm = hours >= 12 ? 'PM' : 'AM';
            hours = hours % 12;
            hours = hours ? hours : 12; // the hour '0' should be '12'
            const minutesStr = minutes < 10 ? '0' + minutes : minutes;
            const strTime = hours + ':' + minutesStr + ' ' + ampm;
            return strTime;
        }

         function sendMessage() {
            let timeSpan = getCurrentTime();      
            let content = document.getElementById('content_field').value;
            if (content === '') {
                return;
            }
            let chat_container = document.querySelector('.chat-container');
            let username=chat_container.getAttribute('data-set')
           let message_details = { username: username, content: content };
             socket.emit('message', message_details);
             let chat_con = document.getElementById('chat-con');
             const outerDiv = document.createElement('div');
             outerDiv.classList.add('flex', 'items-start', 'justify-end', 'mb-4');
             const innerDiv = document.createElement('div');
             innerDiv.classList.add('bg-green-200', 'p-2', 'rounded-lg', 'shadow');
             const messageParagraph = document.createElement('p');
             messageParagraph.classList.add('text-sm');
             messageParagraph.textContent = content;
             const timestampSpan = document.createElement('span');
             timestampSpan.classList.add('text-xs', 'text-gray-500');
             timestampSpan.textContent = timeSpan;

             innerDiv.appendChild(messageParagraph);
             innerDiv.appendChild(timestampSpan);
             outerDiv.appendChild(innerDiv);
             chat_con.appendChild(outerDiv);
             document.getElementById('content_field').value = '';
            }
           
        
        
        async function getAllMessage(username) {
            try {
                let chat_container = document.getElementById('chat-con');
                
                let response = await axios.get('/message/get-all-messages', {
                    headers: {
                        'username': username
                    }
                });
                if (response.data.message === true) {
                    let message_details = response.data.all_messages;
                    message_details.forEach((message) => {
                        if (message.Sender.username === username) {
                            let messageContainer = createIncominggMessageElement(message.content, message.Sender, message.createdAt);
                            chat_container.appendChild(messageContainer);
                        }
                        else {
                            let messageContainer = createOutgoingMessageElement(message.content, message.createdAt);
                            chat_container.appendChild(messageContainer);
                        }
                    })                   
                }
                else {
                    window.location.href = '/user/login';
                }
            } catch (error) {
                console.error('Error fetching messages:', error);
            }
        }
        

        function createIncominggMessageElement(message, Sender, createdAt) {
            const messageContainer = document.createElement('div');
            messageContainer.classList.add('flex', 'items-start', 'mb-4', 'outgoing');
            messageContainer.setAttribute('time', createdAt);
            const userIconContainer = document.createElement('div');
            userIconContainer.classList.add('mr-4', 'w-10', 'h-10', 'bg-gray-300', 'rounded-full', 'flex', 'justify-center', 'items-center', 'p-2');
            userIconContainer.textContent = Sender.fname[0] + '' + Sender.lname[0];
            const messageContentContainer = document.createElement('div');
            messageContentContainer.classList.add('bg-white', 'p-2', 'rounded-lg', 'shadow');
            const messageContent = document.createElement('p');
            messageContent.classList.add('text-sm');
            messageContent.textContent = message;
            const messageTimestamp = document.createElement('span');
            messageTimestamp.classList.add('text-xs', 'text-gray-500');
            messageTimestamp.textContent = new Date(createdAt).toLocaleString();
            messageContentContainer.appendChild(messageContent);
            messageContentContainer.appendChild(messageTimestamp);
            messageContainer.appendChild(userIconContainer);
            messageContainer.appendChild(messageContentContainer);
            return messageContainer;
        }
        function createOutgoingMessageElement(message, createdAt) {
            const messageContainer = document.createElement('div');
            messageContainer.classList.add('flex', 'items-start', 'justify-end', 'mb-4');
            const messageContentContainer = document.createElement('div');
            messageContentContainer.classList.add('bg-green-200', 'p-2', 'rounded-lg', 'shadow');
            const messageContent = document.createElement('p');
            messageContent.classList.add('text-sm');
            messageContent.textContent = message;
            const messageTimestamp = document.createElement('span');
            messageTimestamp.classList.add('text-xs', 'text-gray-500');
            messageTimestamp.textContent = new Date(createdAt).toLocaleString();
            messageContentContainer.appendChild(messageContent);
            messageContentContainer.appendChild(messageTimestamp);
            messageContainer.appendChild(messageContentContainer);
            return messageContainer;
        }

        socket.on('message_added', (data) => {
            let username = '<%=cookies.user_name%>';
            let result=document.getElementById(`${data.sender.username}`)
            if(username === data.receiver){
                let parent_res=result.parentElement.parentElement;
                
                result.parentElement.parentElement.querySelector('.last_message').innerText=data.content;
            }
            if ( data.sender.username === document.querySelector('.chat-container').getAttribute('data-set')  && username===data.receiver) {
               newMessage(data);
            }
                   
            })
        async function newMessage(data) {
            let messageContainer = createIncominggMessageElement(data.content, data.sender, data.timeStamp);
            let chat_container = document.getElementById('chat-con');
            chat_container.appendChild(messageContainer);
        }
</script>

</body>

</html>